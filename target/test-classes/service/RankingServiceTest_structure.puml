@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": false,
    "cutTests": false,
    "cutClient": false,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": false,
    "cutConstructors": false
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "service.RankingServiceTest",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_104069929 { 
   	label=model
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Documento104069929[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Documento</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   dataCaricamento: LocalDateTime [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   dataValidazione: LocalDateTime [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   descrizione: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   dimensione: long [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   hackathonId: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   hash: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nome: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   percorso: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   teamId: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   tipo: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   utenteCaricamento: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   validato: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   validatoreId: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Documento()</TD></TR>
<TR><TD ALIGN="LEFT" >+ Documento(teamId: int, hackathonId: int, nome: String, percorso: String, tipo: String, dimensione: long, utenteCaricamento: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ Documento(teamId: int, hackathonId: int, nome: String, percorso: String, tipo: String, dimensione: long, hash: String, utenteCaricamento: int, descrizione: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDataCaricamento(): LocalDateTime</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDataValidazione(): LocalDateTime</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDescrizione(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDimensione(): long</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDimensioneFormattata(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getEstensione(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getHackathonId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getHash(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getNome(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getPercorso(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTeamId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTipo(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getUtenteCaricamento(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getValidatoreId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ hashCode(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ isArchivio(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isDocumentoTesto(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isImmagine(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isPdf(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isValidato(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ rimuoviValidazione()</TD></TR>
<TR><TD ALIGN="LEFT" >+ setDataCaricamento(dataCaricamento: LocalDateTime)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setDataValidazione(dataValidazione: LocalDateTime)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setDescrizione(descrizione: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setDimensione(dimensione: long)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setHackathonId(hackathonId: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setHash(hash: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setId(id: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setNome(nome: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setPercorso(percorso: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setTeamId(teamId: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setTipo(tipo: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setUtenteCaricamento(utenteCaricamento: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setValidato(validato: boolean)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setValidatoreId(validatoreId: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ valida(validatoreId: int)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

RankingSnapshot104069929[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)RankingSnapshot</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   createdAt: LocalDateTime [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   hackathonId: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   jsonPayload: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   version: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ RankingSnapshot()</TD></TR>
<TR><TD ALIGN="LEFT" >+ RankingSnapshot(hackathonId: int, version: int, jsonPayload: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getCreatedAt(): LocalDateTime</TD></TR>
<TR><TD ALIGN="LEFT" >+ getHackathonId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getJsonPayload(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getVersion(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ setCreatedAt(createdAt: LocalDateTime)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setHackathonId(hackathonId: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setId(id: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setJsonPayload(jsonPayload: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setVersion(version: int)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Registrazione104069929[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Registrazione</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   confermata: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   dataRegistrazione: LocalDateTime [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   hackathonId: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   ruolo: Ruolo [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   utenteId: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Registrazione()</TD></TR>
<TR><TD ALIGN="LEFT" >+ Registrazione(utenteId: int, hackathonId: int, ruolo: Ruolo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ conferma()</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDataRegistrazione(): LocalDateTime</TD></TR>
<TR><TD ALIGN="LEFT" >+ getHackathonId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getRuolo(): Ruolo</TD></TR>
<TR><TD ALIGN="LEFT" >+ getUtenteId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ isConfermata(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isGiudice(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isOrganizzatore(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isPartecipante(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ setConfermata(confermata: boolean)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setDataRegistrazione(dataRegistrazione: LocalDateTime)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setHackathonId(hackathonId: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setId(id: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setRuolo(ruolo: Ruolo)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setUtenteId(utenteId: int)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

RichiestaJoin104069929[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)RichiestaJoin</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   dataRichiesta: LocalDateTime [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   messaggioMotivazionale: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   stato: StatoRichiesta [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   teamId: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   utenteId: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ RichiestaJoin(utenteId: int, teamId: int, messaggioMotivazionale: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ accetta()</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDataRichiesta(): LocalDateTime</TD></TR>
<TR><TD ALIGN="LEFT" >+ getId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getMessaggioMotivazionale(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getStato(): StatoRichiesta</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTeamId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getUtenteId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ isAccettata(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isInAttesa(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isRifiutata(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ rifiuta()</TD></TR>
<TR><TD ALIGN="LEFT" >+ setDataRichiesta(dataRichiesta: LocalDateTime)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setId(id: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setMessaggioMotivazionale(messaggioMotivazionale: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setStato(stato: StatoRichiesta)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setTeamId(teamId: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setUtenteId(utenteId: int)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Team104069929[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Team</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   capoTeamId: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   dataDefinitivo: LocalDateTime [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   definitivo: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   dimensioneMassima: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   hackathonId: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   membriId: List&lt;Integer&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nome: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   richiesteJoin: List&lt;RichiestaJoin&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Team(nome: String, hackathonId: int, capoTeamId: int, dimensioneMassima: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ aggiungiMembro(utenteId: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ aggiungiRichiestaJoin(richiesta: RichiestaJoin)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getCapoTeamId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDataDefinitivo(): LocalDateTime</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDimensioneMassima(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getHackathonId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getMembriId(): List&lt;Integer&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ getNome(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getRichiesteJoin(): List&lt;RichiestaJoin&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ haSpazioDisponibile(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isDefinitivo(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ pueEssereModificato(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ rendiDefinitivo()</TD></TR>
<TR><TD ALIGN="LEFT" >+ rimuoviMembro(utenteId: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ setCapoTeamId(capoTeamId: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setDataDefinitivo(dataDefinitivo: LocalDateTime)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setDefinitivo(definitivo: boolean)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setDimensioneMassima(dimensioneMassima: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setHackathonId(hackathonId: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setId(id: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setMembriId(membriId: List&lt;Integer&gt;)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setNome(nome: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setRichiesteJoin(richiesteJoin: List&lt;RichiestaJoin&gt;)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

TeamRankingResult104069929[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)TeamRankingResult</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   averageScore: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   teamId: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   votesCount: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ TeamRankingResult(teamId: int, averageScore: double, votesCount: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getAverageScore(): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTeamId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getVotesCount(): int</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Valutazione104069929[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Valutazione</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   commento: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   dataValutazione: LocalDateTime [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   giudiceId: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   hackathonId: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   teamId: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   voto: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Valutazione()</TD></TR>
<TR><TD ALIGN="LEFT" >+ Valutazione(giudiceId: int, teamId: int, hackathonId: int, voto: int, commento: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getCommento(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDataValutazione(): LocalDateTime</TD></TR>
<TR><TD ALIGN="LEFT" >+ getGiudiceId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getHackathonId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTeamId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ getValutazioneDescrittiva(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getVoto(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ isVotoValido(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ setCommento(commento: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setDataValutazione(dataValutazione: LocalDateTime)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setGiudiceId(giudiceId: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setHackathonId(hackathonId: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setId(id: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setTeamId(teamId: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ setVoto(voto: int)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_1159906990 { 
   	label=RichiestaJoin
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   StatoRichiesta2030292147[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(E)StatoRichiesta</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   ACCETTATA: StatoRichiesta [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   IN_ATTESA: StatoRichiesta [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   RIFIUTATA: StatoRichiesta [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ valueOf(name: String): StatoRichiesta</TD></TR>
<TR><TD ALIGN="LEFT" >+ values(): StatoRichiesta[]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#DCFBD5"
];
} 

subgraph cluster_1789464955 { 
   	label=database
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   ConnectionManager1789464955[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ConnectionManager</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   dataSource: DataSource [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ ConnectionManager(dataSource: DataSource)</TD></TR>
<TR><TD ALIGN="LEFT" >- checkTableExists(stmt: Statement, table: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ commit(conn: Connection)</TD></TR>
<TR><TD ALIGN="LEFT" >+ getConnection(): Connection</TD></TR>
<TR><TD ALIGN="LEFT" >+ getDatabaseUrl(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getPassword(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getUsername(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ rollback(conn: Connection)</TD></TR>
<TR><TD ALIGN="LEFT" >+ testConnection(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ testTables()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

DataAccessException1789464955[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)DataAccessException</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ DataAccessException(message: String)</TD></TR>
<TR><TD ALIGN="LEFT" >+ DataAccessException(message: String, cause: Throwable)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_1894575026 { 
   	label=Registrazione
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Ruolo1024189869[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(E)Ruolo</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   GIUDICE: Ruolo [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   ORGANIZZATORE: Ruolo [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   PARTECIPANTE: Ruolo [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ valueOf(name: String): Ruolo</TD></TR>
<TR><TD ALIGN="LEFT" >+ values(): Ruolo[]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#DCFBD5"
];
} 

subgraph cluster_1984153269 { 
   	label=service
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   RankingService1984153269[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)RankingService</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   documentoDAO: DocumentoDAO [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   objectMapper: ObjectMapper [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   registrazioneDAO: RegistrazioneDAO [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   snapshotDAO: RankingSnapshotDAO [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   teamDAO: TeamDAO [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   valutazioneDAO: ValutazioneDAO [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ RankingService(teamDAO: TeamDAO, valutazioneDAO: ValutazioneDAO, registrazioneDAO: RegistrazioneDAO, documentoDAO: DocumentoDAO, snapshotDAO: RankingSnapshotDAO)</TD></TR>
<TR><TD ALIGN="LEFT" >+ computePreview(hackathonId: int, allowMissingVotes: boolean): Preview</TD></TR>
<TR><TD ALIGN="LEFT" >- earliestSubmission(hackathonId: int, teamId: int): LocalDateTime</TD></TR>
<TR><TD ALIGN="LEFT" >+ publish(hackathonId: int, allowMissingVotes: boolean, organizerUserId: int, motivation: String): PublishResult</TD></TR>
<TR><TD ALIGN="LEFT" >- stdDev(arr: double[], avg: double): double</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

RankingServiceTest1984153269[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)RankingServiceTest</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   mockConnectionManager: ConnectionManager [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   mockDocumentDAO: DocumentoDAO [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   mockRegistrationDAO: RegistrazioneDAO [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   mockSnapshotDAO: RankingSnapshotDAO [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   mockTeamDAO: TeamDAO [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   mockValutazioneDAO: ValutazioneDAO [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   service: RankingService [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" ># afterAll()</TD></TR>
<TR><TD ALIGN="LEFT" ># beforeAll()</TD></TR>
<TR><TD ALIGN="LEFT" >- createRegistration(utenteId: int, hackathonId: int, ruolo: String): Registrazione</TD></TR>
<TR><TD ALIGN="LEFT" >- createTeam(id: int, nome: String): Team</TD></TR>
<TR><TD ALIGN="LEFT" >- createValutazione(teamId: int, giudiceId: int, voto: int): Valutazione</TD></TR>
<TR><TD ALIGN="LEFT" >- initializeTestSchema(connection: Connection)</TD></TR>
<TR><TD ALIGN="LEFT" ># setUp()</TD></TR>
<TR><TD ALIGN="LEFT" ># tearDown()</TD></TR>
<TR><TD ALIGN="LEFT" ># testAreAllVotesAcquired_AllVotesPresent()</TD></TR>
<TR><TD ALIGN="LEFT" ># testAreAllVotesAcquired_MissingVotes()</TD></TR>
<TR><TD ALIGN="LEFT" ># testPreviewRanking_TieBreakerEarliestSubmission()</TD></TR>
<TR><TD ALIGN="LEFT" ># testPreviewRanking_TieBreakerStandardDeviation()</TD></TR>
<TR><TD ALIGN="LEFT" ># testPreviewRanking_TieBreakerTeamNameAlphabetical()</TD></TR>
<TR><TD ALIGN="LEFT" ># testPublishRanking_MissingVotesNoOverride()</TD></TR>
<TR><TD ALIGN="LEFT" ># testPublishRanking_Success()</TD></TR>
<TR><TD ALIGN="LEFT" ># testPublishRanking_WithOverride()</TD></TR>
<TR><TD ALIGN="LEFT" ># testSnapshotImmutability_CorrectVersioning()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_757584761 { 
   	label=postgres
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   DocumentoPostgresDAO693642837[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)DocumentoPostgresDAO</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   connectionManager: ConnectionManager [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ DocumentoPostgresDAO(connectionManager: ConnectionManager)</TD></TR>
<TR><TD ALIGN="LEFT" >+ countByHackathon(hackathonId: int): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ countByTeam(teamId: int): int</TD></TR>
<TR><TD ALIGN="LEFT" >- countDocumenti(query: String, parametro: int): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ delete(id: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ deleteByHackathon(hackathonId: int): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ deleteByTeam(teamId: int): int</TD></TR>
<TR><TD ALIGN="LEFT" >- deleteDocumenti(query: String, parametro: int, descrizione: String): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ existsByHash(hash: String): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ findAll(): List&lt;Documento&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findByHackathon(hackathonId: int): List&lt;Documento&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findByHash(hash: String): List&lt;Documento&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findById(id: int): Documento</TD></TR>
<TR><TD ALIGN="LEFT" >+ findByTeam(teamId: int): List&lt;Documento&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findByTipo(tipo: String): List&lt;Documento&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findByUtente(utenteId: int): List&lt;Documento&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findByValidato(validato: boolean): List&lt;Documento&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- findDocumenti(query: String, parametro: int): List&lt;Documento&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- findDocumentiByString(query: String, parametro: String): List&lt;Documento&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- getTotalSize(query: String, parametro: int): long</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTotalSizeByHackathon(hackathonId: int): long</TD></TR>
<TR><TD ALIGN="LEFT" >+ getTotalSizeByTeam(teamId: int): long</TD></TR>
<TR><TD ALIGN="LEFT" >+ insert(documento: Documento): int</TD></TR>
<TR><TD ALIGN="LEFT" >- mapResultSetToDocumento(resultSet: ResultSet): Documento</TD></TR>
<TR><TD ALIGN="LEFT" >+ rimuoviValidazione(documentoId: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ update(documento: Documento): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ valida(documentoId: int, validatoreId: int): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

RankingSnapshotPostgresDAO693642837[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)RankingSnapshotPostgresDAO</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   cm: ConnectionManager [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ RankingSnapshotPostgresDAO(cm: ConnectionManager)</TD></TR>
<TR><TD ALIGN="LEFT" >+ findLatestByHackathon(hackathonId: int): RankingSnapshot</TD></TR>
<TR><TD ALIGN="LEFT" >+ findMaxVersion(hackathonId: int): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ insert(snapshot: RankingSnapshot): int</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

RegistrazionePostgresDAO693642837[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)RegistrazionePostgresDAO</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   cm: ConnectionManager [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ RegistrazionePostgresDAO(connectionManager: ConnectionManager)</TD></TR>
<TR><TD ALIGN="LEFT" >+ confermaRegistrazione(registrazioneId: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ contaRegistrazioni(hackathonId: int): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ contaRegistrazioniConfermate(hackathonId: int): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ contaRegistrazioniPerRuolo(hackathonId: int, ruolo: Ruolo): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ delete(id: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- executeListResultQuery(pstmt: PreparedStatement): List&lt;Registrazione&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- executeOperationWithRollback(conn: Connection, operation: DatabaseOperation&lt;T&gt;): T</TD></TR>
<TR><TD ALIGN="LEFT" >- executeSingleBooleanQuery(pstmt: PreparedStatement): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- executeSingleBooleanQuery(pstmt: PreparedStatement, columnName: String): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- executeSingleIntQuery(pstmt: PreparedStatement): int</TD></TR>
<TR><TD ALIGN="LEFT" >- executeSingleResultQuery(pstmt: PreparedStatement): Registrazione</TD></TR>
<TR><TD ALIGN="LEFT" >- executeWithTransaction(operation: DatabaseOperation&lt;T&gt;): T</TD></TR>
<TR><TD ALIGN="LEFT" >+ findAll(): List&lt;Registrazione&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findByHackathon(hackathonId: int): List&lt;Registrazione&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findByHackathonAndRuolo(hackathonId: int, ruolo: Ruolo): List&lt;Registrazione&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findById(id: int): Registrazione</TD></TR>
<TR><TD ALIGN="LEFT" >+ findByUtente(utenteId: int): List&lt;Registrazione&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findByUtenteAndHackathon(utenteId: int, hackathonId: int): Registrazione</TD></TR>
<TR><TD ALIGN="LEFT" >+ findConfermateByHackathon(hackathonId: int): List&lt;Registrazione&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findGiudici(hackathonId: int): List&lt;Registrazione&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findNonConfermate(): List&lt;Registrazione&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findNonConfermateByHackathon(hackathonId: int): List&lt;Registrazione&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findOrganizzatori(hackathonId: int): List&lt;Registrazione&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findPartecipanti(hackathonId: int): List&lt;Registrazione&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ insert(registrazione: Registrazione): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ isConfermato(utenteId: int, hackathonId: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isRegistrato(utenteId: int, hackathonId: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- mapResultSetToRegistrazione(rs: ResultSet): Registrazione</TD></TR>
<TR><TD ALIGN="LEFT" >+ update(registrazione: Registrazione): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

TeamPostgresDAO693642837[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)TeamPostgresDAO</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   cm: ConnectionManager [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ TeamPostgresDAO(connectionManager: ConnectionManager)</TD></TR>
<TR><TD ALIGN="LEFT" >+ accettaRichiestaJoin(richiestaId: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ aggiungiMembro(teamId: int, utenteId: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ cambiaCapoTeam(teamId: int, nuovoCapoTeamId: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ contaMembri(teamId: int): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ delete(id: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- executeIntegerListQuery(pstmt: PreparedStatement): List&lt;Integer&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- executeOperationWithRollback(conn: Connection, operation: DatabaseOperation&lt;T&gt;): T</TD></TR>
<TR><TD ALIGN="LEFT" >- executeRichiestaJoinListQuery(pstmt: PreparedStatement): List&lt;RichiestaJoin&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- executeSingleBooleanQuery(pstmt: PreparedStatement): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- executeSingleBooleanQueryWithDimensione(pstmt: PreparedStatement): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- executeSingleIntQuery(pstmt: PreparedStatement, columnName: String): int</TD></TR>
<TR><TD ALIGN="LEFT" >- executeWithTransaction(operation: DatabaseOperation&lt;T&gt;): T</TD></TR>
<TR><TD ALIGN="LEFT" >+ findAll(): List&lt;Team&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findByCapoTeam(capoTeamId: int): List&lt;Team&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findByHackathon(hackathonId: int): List&lt;Team&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findById(id: int): Team</TD></TR>
<TR><TD ALIGN="LEFT" >+ findByMembro(utenteId: int): List&lt;Team&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findMembri(teamId: int): List&lt;Integer&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findRichiestaJoinById(richiestaId: int): RichiestaJoin</TD></TR>
<TR><TD ALIGN="LEFT" >+ findRichiesteJoin(teamId: int): List&lt;RichiestaJoin&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findRichiesteJoinByUtente(utenteId: int): List&lt;RichiestaJoin&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findRichiesteJoinInAttesa(teamId: int): List&lt;RichiestaJoin&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ haRaggiuntoLimiteMembri(teamId: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ haSpazioDisponibile(teamId: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ insert(team: Team): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ insertRichiestaJoin(richiesta: RichiestaJoin): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ isCapoTeam(teamId: int, utenteId: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isMembro(teamId: int, utenteId: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ isTeamDefinitivo(teamId: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- mapResultSetToRichiestaJoin(rs: ResultSet): RichiestaJoin</TD></TR>
<TR><TD ALIGN="LEFT" >- mapResultSetToTeam(rs: ResultSet): Team</TD></TR>
<TR><TD ALIGN="LEFT" >+ rendiDefinitiviTeamHackathon(hackathonId: int): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ rifiutaRichiestaJoin(richiestaId: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ rimuoviMembro(teamId: int, utenteId: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ update(team: Team): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ updateRichiestaJoin(richiesta: RichiestaJoin): boolean</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

ValutazionePostgresDAO693642837[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ValutazionePostgresDAO</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   cm: ConnectionManager [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ ValutazionePostgresDAO(connectionManager: ConnectionManager)</TD></TR>
<TR><TD ALIGN="LEFT" >+ contaValutazioniGiudice(giudiceId: int): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ contaValutazioniHackathon(hackathonId: int): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ contaValutazioniTeam(teamId: int): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ delete(id: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- executeListResultQuery(pstmt: PreparedStatement): List&lt;Valutazione&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >- executeOperationWithRollback(conn: Connection, operation: DatabaseOperation&lt;T&gt;): T</TD></TR>
<TR><TD ALIGN="LEFT" >- executeSingleBooleanQuery(pstmt: PreparedStatement): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >- executeSingleDoubleQuery(pstmt: PreparedStatement): double</TD></TR>
<TR><TD ALIGN="LEFT" >- executeSingleIntQuery(pstmt: PreparedStatement): int</TD></TR>
<TR><TD ALIGN="LEFT" >- executeSingleResultQuery(pstmt: PreparedStatement): Valutazione</TD></TR>
<TR><TD ALIGN="LEFT" >- executeWithTransaction(operation: DatabaseOperation&lt;T&gt;): T</TD></TR>
<TR><TD ALIGN="LEFT" >+ findAll(): List&lt;Valutazione&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findAllOrderByVoto(): List&lt;Valutazione&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findByGiudice(giudiceId: int): List&lt;Valutazione&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findByGiudiceAndTeam(giudiceId: int, teamId: int): Valutazione</TD></TR>
<TR><TD ALIGN="LEFT" >+ findByHackathon(hackathonId: int): List&lt;Valutazione&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findByHackathonOrderByVoto(hackathonId: int): List&lt;Valutazione&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findById(id: int): Valutazione</TD></TR>
<TR><TD ALIGN="LEFT" >+ findByTeam(teamId: int): List&lt;Valutazione&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findByTeamAndHackathon(teamId: int, hackathonId: int): List&lt;Valutazione&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findClassificaTeam(hackathonId: int): List&lt;Integer&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findTeamNonValutati(giudiceId: int, hackathonId: int): List&lt;Integer&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findTeamRankingByHackathon(hackathonId: int): List&lt;TeamRankingResult&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ findTeamVincitore(hackathonId: int): Integer</TD></TR>
<TR><TD ALIGN="LEFT" >+ findValutazioneMediaTeam(teamId: int): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ findValutazioneMediaTeamInHackathon(teamId: int, hackathonId: int): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ haGiudiceValutatoTeam(giudiceId: int, teamId: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ insert(valutazione: Valutazione): Valutazione</TD></TR>
<TR><TD ALIGN="LEFT" >- mapResultSetToValutazione(rs: ResultSet): Valutazione</TD></TR>
<TR><TD ALIGN="LEFT" >+ update(valutazione: Valutazione): Valutazione</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_818391617 { 
   	label=RankingService
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Entry499041816[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Entry</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   average: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   earliestSubmission: LocalDateTime [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   missingVotes: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   position: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   stdDev: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   teamId: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   teamName: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   votes: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Entry(teamId: int, teamName: String, average: double, stdDev: double, votes: int, earliestSubmission: LocalDateTime, missingVotes: boolean)</TD></TR>
<TR><TD ALIGN="LEFT" >+ average(): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ earliestSubmission(): LocalDateTime</TD></TR>
<TR><TD ALIGN="LEFT" >+ missingVotes(): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ position(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ setPosition(p: int)</TD></TR>
<TR><TD ALIGN="LEFT" >+ stdDev(): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ teamId(): int</TD></TR>
<TR><TD ALIGN="LEFT" >+ teamName(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ toMap(): Map&lt;String, Object&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ votes(): int</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Preview499041816[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Preview</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   entries: List&lt;Entry&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >+   missingVotes: boolean [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ Preview(entries: List&lt;Entry&gt;, missingVotes: boolean)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

PublishResult499041816[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)PublishResult</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   code: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   message: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   snapshotId: Integer [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   success: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   version: Integer [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- PublishResult(success: boolean, code: String, message: String, id: Integer, version: Integer)</TD></TR>
<TR><TD ALIGN="LEFT" >+ error(code: String, message: String): PublishResult</TD></TR>
<TR><TD ALIGN="LEFT" >+ ok(id: int, version: int): PublishResult</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

'edges    
DocumentoPostgresDAO693642837 -> ConnectionManager1789464955[label="connectionManager
[0..1]"];
RankingService1984153269 -> Documento104069929[label="earliestSubmission() -> getHackathonId()"];
RankingService1984153269 -> RankingSnapshot104069929[label="publish() -> RankingSnapshot()"];
RankingServiceTest1984153269 -> ConnectionManager1789464955[label="mockConnectionManager
[0..1]"];
RankingServiceTest1984153269 -> DocumentoPostgresDAO693642837[arrowhead=none];
RankingServiceTest1984153269 -> RankingService1984153269[label="service
[0..1]"];
RankingServiceTest1984153269 -> RankingSnapshotPostgresDAO693642837[arrowhead=none];
RankingServiceTest1984153269 -> RegistrazionePostgresDAO693642837[arrowhead=none];
RankingServiceTest1984153269 -> Ruolo1024189869[label="createRegistration() -> valueOf()"];
RankingServiceTest1984153269 -> TeamPostgresDAO693642837[arrowhead=none];
RankingServiceTest1984153269 -> ValutazionePostgresDAO693642837[arrowhead=none];
RankingSnapshotPostgresDAO693642837 -> ConnectionManager1789464955[label="cm
[0..1]"];
Registrazione104069929 -> Ruolo1024189869[label="ruolo
[0..1]"];
RegistrazionePostgresDAO693642837 -> ConnectionManager1789464955[label="cm
[0..1]"];
RegistrazionePostgresDAO693642837 -> Ruolo1024189869[label="mapResultSetToRegistrazione() -> valueOf()"];
RichiestaJoin104069929 -> StatoRichiesta2030292147[label="stato
[0..1]"];
Team104069929 -> RichiestaJoin104069929[label="richiesteJoin
[0..*]"];
TeamPostgresDAO693642837 -> ConnectionManager1789464955[label="cm
[0..1]"];
ValutazionePostgresDAO693642837 -> ConnectionManager1789464955[label="cm
[0..1]"];
ValutazionePostgresDAO693642837 -> TeamRankingResult104069929[label="findTeamRankingByHackathon() -> TeamRankingResult()"];
    
}
@enduml